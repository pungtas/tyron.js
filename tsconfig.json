{
    "compilerOptions": {
        /* Basic Options */
        "target": "ES2020" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */,
        "module": "commonjs" /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
        "lib": [
            "ES2020",
            "dom"
        ] /* Specify library files to be included in the compilation:  */,
        "allowJs": false /* Allow javascript files to be compiled. */,
        "checkJs": false /* Report errors in .js files. */,
        "declaration": true /* Generates corresponding '.d.ts' file. */,
        "declarationMap": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,
        "sourceMap": true /* Generates corresponding '.map' file. */,
        "outDir": "./dist" /* Redirect output structure to the directory. */,
        "rootDir": "./lib" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
        "removeComments": false /* Do not emit comments to output. */,
        "importHelpers": true /* Import emit helpers from 'tslib'. */,
        "downlevelIteration": true /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */,
        "isolatedModules": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,

        /* Strict Type-Checking Options */
        "strict": true /* Enable all strict type-checking options. */,
        "noImplicitAny": true /* Raise error on expressions and declarations with an implied 'any' type. */,
        "strictNullChecks": true /* Enable strict null checks. */,
        "strictFunctionTypes": true /* Enable strict checking of function types. */,
        "strictBindCallApply": true /* Enable strict 'bind', 'call', and 'apply' methods on functions. */,
        "strictPropertyInitialization": true /* Enable strict checking of property initialization in classes. */,
        "noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
        "alwaysStrict": true /* Parse in strict mode and emit "use strict" for each source file. */,

        /* Additional Checks */
        "noUnusedLocals": true /* Report errors on unused locals. */,
        "noUnusedParameters": true /* Report errors on unused parameters. */,
        "exactOptionalPropertyTypes": false /* Interpret optional property types as written, rather than adding 'undefined'. */,
        "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
        "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,
        "noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results. */,
        "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an 'override' modifier. */,

        /* Module Resolution Options */
        "typeRoots": [
            "./node_modules/@types"
        ] /* List of folders to include type definitions from. */,
        "moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
        "baseUrl": "./" /* Base directory to resolve non-absolute module names. */,
        "paths": {
            "@/*": ["lib/*"]
        } /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */,
        "rootDirs": [
            "./lib"
        ] /* List of root folders whose combined content represents the structure of the project at runtime. */,
        "resolveJsonModule": true /* Enable importing .json files. */,
        "skipLibCheck": true /* Skip type checking of declaration files. */,

        /* Source Map Options */
        // "sourceRoot": "./",                    /* Specify the location where debugger should locate TypeScript files instead of source locations. */
        // "mapRoot": "./",                       /* Specify the location where debugger should locate map files instead of generated locations. */
        // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
        // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

        /* Experimental Options */
        "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
        "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,

        /* Performance Options */
        "incremental": true /* Enable incremental compilation. */,
        "tsBuildInfoFile": "./dist/.tsbuildinfo" /* Specify file to store incremental compilation information. */
    },
    "include": ["./lib/**/*.ts", "./tests/**/*.ts"]
}
